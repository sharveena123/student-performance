/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 robot1.glb --draco 
Author: Abdur Razzak Sawon (https://sketchfab.com/md.abdur.razzak.sawon)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/cute-round-robot-with-big-eyes-small-limbs-72197b3e13b349ae98c6eab2879dcc72
Title: Cute round robot with big eyes, small limbs.
*/

import React, { useEffect } from 'react'
import { useRef, useState } from "react";
import { useSpring, animated } from "@react-spring/three";
import { useFrame } from "@react-three/fiber";
import { useGLTF, useAnimations } from '@react-three/drei';

export function Robot1(props) {
  const { nodes, materials } = useGLTF('/model/robot1.glb')
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.Object_2.geometry} material={materials.place_holder} rotation={[-Math.PI / 2, 0, 0]} />
    </group>
  )
}
function HoverBall() {
  const ballRef = useRef();
  const [target, setTarget] = useState([0, 0]);

  // Spring animation
  const { position } = useSpring({
    position: [target[0], target[1], -0.5], // Z stays fixed
    config: { mass: 1, tension: 170, friction: 26 },
  });

  // Update target when mouse moves
  const handlePointerMove = (e) => {
    const x = (e.clientX / window.innerWidth) * 2 - 1; // Normalize to -1 to 1
    const y = -(e.clientY / window.innerHeight) * 2 + 1;

    // Clamp movement so ball doesn't go too far
    const clamp = (val, min, max) => Math.max(min, Math.min(max, val));
    setTarget([
      clamp(x * 0.5, -0.5, 0.5), // X range
      clamp(y * 0.5, -0.5, 0.5), // Y range
    ]);
  };

  useEffect(() => {
    document.addEventListener("pointermove", handlePointerMove);
    return () => document.removeEventListener("pointermove", handlePointerMove);
  }, []);

  return (
    <animated.group position={position}>
      <Robot1 scale={[1.5, 1.5, 1.5]} />
    </animated.group>
  );
}

useGLTF.preload('/model/robot1.glb')
