/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 robot.glb --draco 
Author: victory_mirosya (https://sketchfab.com/victory_mirosya)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/cute-robot-6aadb75f596742ada2814ad4593f0032
Title: cute robot
*/
import React, { useEffect } from 'react'
import { useRef, useState } from "react";
import { useSpring, animated } from "@react-spring/three";
import { useFrame } from "@react-three/fiber";
import { useGLTF, useAnimations } from '@react-three/drei';


export function Robot(props) {
  const group = React.useRef()
  const { nodes, materials, animations } = useGLTF('/model/robot.glb')
  const { actions } = useAnimations(animations, group)
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="root">
            <group name="GLTF_SceneRootNode" rotation={[Math.PI / 2, 0, 0]}>
              <group name="Cylinder_0" position={[0.005, 1.227, 0.854]} rotation={[Math.PI / 2, 0, 0]} scale={[0.153, 0.285, 0.153]}>
                <mesh name="Object_4" geometry={nodes.Object_4.geometry} material={materials.BODY} />
                <mesh name="Object_5" geometry={nodes.Object_5.geometry} material={materials.GLOW} />
                <mesh name="Object_6" geometry={nodes.Object_6.geometry} material={materials.SCREEN} />
              </group>
              <group name="Cube002_1" position={[0, 0, -0.279]} rotation={[0, 0.473, 0]} scale={[0.892, 0.611, 0.611]}>
                <mesh name="Object_8" geometry={nodes.Object_8.geometry} material={materials.BODY} />
                <mesh name="Object_9" geometry={nodes.Object_9.geometry} material={materials['Material.001']} />
              </group>
              <group name="Plane_2" position={[0.473, 1.235, 0.136]} rotation={[0, 0, -Math.PI / 2]} scale={[0.168, 0.21, 0.09]}>
                <mesh name="mesh_2" geometry={nodes.mesh_2.geometry} material={materials.EYES} morphTargetDictionary={nodes.mesh_2.morphTargetDictionary} morphTargetInfluences={nodes.mesh_2.morphTargetInfluences} />
              </group>
              <group name="Plane001_3" position={[0.473, 1.235, -0.138]} rotation={[0, 0, -Math.PI / 2]} scale={[0.168, 0.21, 0.09]}>
                <mesh name="mesh_3" geometry={nodes.mesh_3.geometry} material={materials.EYES} morphTargetDictionary={nodes.mesh_3.morphTargetDictionary} morphTargetInfluences={nodes.mesh_3.morphTargetInfluences} />
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}
function HoverBall() {
  const ballRef = useRef();
  const [target, setTarget] = useState([0, 0]);

  // Spring animation
  const { position } = useSpring({
    position: [target[0], target[1], -0.5], // Z stays fixed
    config: { mass: 1, tension: 170, friction: 26 },
  });

  // Update target when mouse moves
  const handlePointerMove = (e) => {
    const x = (e.clientX / window.innerWidth) * 2 - 1; // Normalize to -1 to 1
    const y = -(e.clientY / window.innerHeight) * 2 + 1;

    // Clamp movement so ball doesn't go too far
    const clamp = (val, min, max) => Math.max(min, Math.min(max, val));
    setTarget([
      clamp(x * 0.5, -0.5, 0.5), // X range
      clamp(y * 0.5, -0.5, 0.5), // Y range
    ]);
  };

  useEffect(() => {
    document.addEventListener("pointermove", handlePointerMove);
    return () => document.removeEventListener("pointermove", handlePointerMove);
  }, []);

  return (
    <animated.group position={position}>
      <Robot scale={[1.5, 1.5, 1.5]} />
    </animated.group>
  );
}
useGLTF.preload('/model/robot.glb')
export default Robot;