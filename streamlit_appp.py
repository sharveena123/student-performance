# -*- coding: utf-8 -*-
"""streamlit_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hm-smKJu_fMlMKN9iW5rzXycWUvD-Ajd
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
import warnings
warnings.filterwarnings('ignore')

# Set page config
st.set_page_config(
    page_title="Student Performance Predictor",
    page_icon="🎓",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Title and description
st.title("🎓 Student Performance Prediction System")
st.markdown("""
This application analyzes student performance data and predicts academic outcomes.
Upload your student dataset or use the sample data to get started.
""")

# Sidebar for navigation
st.sidebar.title("Navigation")
page = st.sidebar.selectbox("Choose a section:", [
    "🤖 Performance Prediction",
    "📈 Interactive Dashboard"
])

# Data loading function
@st.cache_data
def load_and_clean_data(uploaded_file=None):
    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file)
        except Exception as e:
            st.error(f"Error reading CSV file: {str(e)}")
            return pd.DataFrame()
    else:
        # Create sample data
        np.random.seed(42)
        n_samples = 500

        df = pd.DataFrame({
            'Student_ID': range(1, n_samples + 1),
            'Student_Age': np.random.randint(17, 25, n_samples),
            'Sex': np.random.choice(['male', 'female'], n_samples),
            'High_School_Type': np.random.choice(['private', 'state', 'other'], n_samples, p=[0.3, 0.6, 0.1]),
            'Scholarship': np.random.randint(0, 101, n_samples),
            'Additional_Work': np.random.choice(['no', 'yes'], n_samples, p=[0.6, 0.4]),
            'Sports_activity': np.random.choice(['no', 'yes'], n_samples, p=[0.5, 0.5]),
            'Transportation': np.random.choice(['bus', 'private'], n_samples, p=[0.7, 0.3]),
            'Weekly_Study_Hours': np.random.randint(1, 21, n_samples),
            'Attendance': np.random.choice(['never', 'sometimes', 'always'], n_samples, p=[0.1, 0.3, 0.6]),
            'Reading': np.random.choice(['no', 'yes'], n_samples, p=[0.4, 0.6]),
            'Notes': np.random.choice(['no', 'yes'], n_samples, p=[0.3, 0.7]),
            'Listening_in_Class': np.random.choice(['no', 'yes'], n_samples, p=[0.2, 0.8]),
            'Project_work': np.random.choice(['no', 'yes'], n_samples, p=[0.3, 0.7]),
        })

        # Create grades based on some logic
        grade_score = (
            (df['Weekly_Study_Hours'] * 0.3) +
            (df['Scholarship'] * 0.02) +
            (df['Attendance'].map({'never': 0, 'sometimes': 5, 'always': 10}) * 0.2) +
            (df['Reading'].map({'no': 0, 'yes': 5}) * 0.1) +
            (df['Sports_activity'].map({'no': 0, 'yes': 3}) * 0.1) +
            np.random.normal(0, 5, n_samples)
        )

        # Map to letter grades
        df['Grade'] = pd.cut(grade_score,
                           bins=[-np.inf, 10, 20, 30, 40, 50, 60, 70, np.inf],
                           labels=['fail', 'dd', 'dc', 'cc', 'cb', 'bb', 'ba', 'aa'])

    if df.empty:
        return df

    # Data cleaning for uploaded data
    if uploaded_file is not None:
        # Convert age ranges to numeric (take the first number)
        if 'Student_Age' in df.columns:
            df['Student_Age'] = df['Student_Age'].astype(str).str.extract('(\d+)')[0].astype(float)

        # Convert scholarship percentage to numeric
        if 'Scholarship' in df.columns:
            df['Scholarship'] = df['Scholarship'].astype(str).str.replace('%', '').astype(float)

        # Convert study hours to numeric (handle potential text)
        if 'Weekly_Study_Hours' in df.columns:
            df['Weekly_Study_Hours'] = pd.to_numeric(df['Weekly_Study_Hours'], errors='coerce')

    # Data cleaning for all data
    categorical_columns = [
        'Sex', 'High_School_Type', 'Additional_Work', 'Sports_activity',
        'Transportation', 'Attendance', 'Reading', 'Notes',
        'Listening_in_Class', 'Project_work'
    ]

    # Clean categorical columns that exist
    for col in categorical_columns:
        if col in df.columns:
            df[col] = df[col].astype(str).str.lower().str.strip()
            df[col] = df[col].replace('', np.nan)

    # Create numerical grade mapping
    if 'Grade' in df.columns:
        grade_mapping = {
            'aa': 5, 'ba': 4.5, 'bb': 4, 'cb': 3.5, 'cc': 3,
            'dc': 2.5, 'dd': 2, 'fail': 1
        }
        df['Grade_num'] = df['Grade'].str.lower().map(grade_mapping)
    else:
        st.warning("⚠️ No 'Grade' column found. You may need to add target variable.")

    # Handle missing values
    if 'Grade_num' in df.columns:
        df = df.dropna(subset=['Grade_num'])

    # Fill other missing values
    for col in df.columns:
        if df[col].isnull().any():
            if col in categorical_columns and col in df.columns:
                mode_val = df[col].mode()[0]
                df[col] = df[col].fillna(mode_val)
            elif pd.api.types.is_numeric_dtype(df[col]):
                median_val = df[col].median()
                df[col] = df[col].fillna(median_val)

    return df

# Load data
st.sidebar.subheader("📁 Data Upload")
uploaded_file = st.sidebar.file_uploader("Upload your CSV file", type=['csv'])

if uploaded_file is not None:
    st.sidebar.success("File uploaded successfully!")
else:
    st.sidebar.info("Using sample dataset for demonstration")

try:
    df = load_and_clean_data(uploaded_file)
    if df.empty:
        st.error("❌ Dataset is empty after loading!")
        st.stop()
except Exception as e:
    st.error(f"❌ Error loading data: {str(e)}")
    st.stop()

if page == "🤖 Performance Prediction":
    st.header("🤖 Student Performance Prediction")

    # Prepare data for modeling
    @st.cache_data
    def prepare_model_data(df):
        if df.empty:
            return None, None, None

        categorical_cols = ['Sex', 'High_School_Type', 'Additional_Work', 'Sports_activity',
                           'Transportation', 'Attendance', 'Reading', 'Notes',
                           'Listening_in_Class', 'Project_work']

        df_model = df.copy()
        existing_categorical_cols = [col for col in categorical_cols if col in df_model.columns]

        # Encode categorical variables
        for col in existing_categorical_cols:
            if len(df_model[col].unique()) > 1:
                df_encoded = pd.get_dummies(df_model[col], prefix=col, drop_first=True)
                df_model = pd.concat([df_model, df_encoded], axis=1)

        # Select features for modeling
        exclude_cols = ['Student_ID', 'Grade', 'Grade_num'] + existing_categorical_cols
        feature_cols = [col for col in df_model.columns if col not in exclude_cols]

        if not feature_cols:
            return None, None, None

        X = df_model[feature_cols]
        y = df_model['Grade_num']

        valid_indices = ~(X.isnull().any(axis=1) | y.isnull())
        X = X[valid_indices]
        y = y[valid_indices]

        if len(X) == 0:
            return None, None, None

        return X, y, feature_cols

    # Prepare data with error handling
    try:
        X, y, feature_cols = prepare_model_data(df)
        if X is None:
            st.stop()
    except Exception as e:
        st.error(f"Error preparing data: {str(e)}")
        st.stop()

    # Train model
    @st.cache_data
    def train_model(X, y):
        if len(X) < 5:
            raise ValueError("Not enough samples for training")

        test_size = min(0.2, max(0.1, len(X) // 5))
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42)

        model = RandomForestRegressor(n_estimators=100, random_state=42)
        model.fit(X_train, y_train)

        return model, X_train, X_test, y_train, y_test

    # Train model with error handling
    try:
        model, X_train, X_test, y_train, y_test = train_model(X, y)
    except Exception as e:
        st.error(f"Error training model: {str(e)}")
        st.stop()

    # Individual prediction
    # st.subheader("🔮 Individual Student Prediction")

    col1, col2 = st.columns(2)

    with col1:
        student_age = st.slider("Age", 17, 25, 20)
        sex = st.selectbox("Sex", ['male', 'female'])
        high_school = st.selectbox("High School Type", ['private', 'state', 'other'])
        scholarship = st.slider("Scholarship %", 0, 100, 50)
        study_hours = st.slider("Weekly Study Hours", 1, 20, 10)

    with col2:
        additional_work = st.selectbox("Part-time Work", ['no', 'yes'])
        sports = st.selectbox("Sports Activity", ['no', 'yes'])
        transportation = st.selectbox("Transportation", ['bus', 'private'])
        attendance = st.selectbox("Attendance", ['never', 'sometimes', 'always'])
        reading = st.selectbox("Reading Habit", ['no', 'yes'])

    # Create prediction input
    input_data = pd.DataFrame({
        'Student_Age': [student_age],
        'Scholarship': [scholarship],
        'Weekly_Study_Hours': [study_hours]
    })

    # Add categorical encodings
    categorical_mappings = {
        'Sex_male': 1 if sex == 'male' else 0,
        'High_School_Type_state': 1 if high_school == 'state' else 0,
        'High_School_Type_other': 1 if high_school == 'other' else 0,
        'Additional_Work_yes': 1 if additional_work == 'yes' else 0,
        'Sports_activity_yes': 1 if sports == 'yes' else 0,
        'Transportation_private': 1 if transportation == 'private' else 0,
        'Attendance_sometimes': 1 if attendance == 'sometimes' else 0,
        'Attendance_always': 1 if attendance == 'always' else 0,
        'Reading_yes': 1 if reading == 'yes' else 0,
        'Notes_yes': 1,
        'Listening_in_Class_yes': 1,
        'Project_work_yes': 1
    }

    for col, val in categorical_mappings.items():
        if col in feature_cols:
            input_data[col] = val

    # Ensure all required columns are present
    for col in feature_cols:
        if col not in input_data.columns:
            input_data[col] = 0

    input_data = input_data[feature_cols]

    if st.button("🎯 Predict Performance"):
        prediction = model.predict(input_data)[0]

        def map_grade(score):
            if score >= 4.75:
                return "AA"
            elif score >= 4.25:
                return "BA"
            elif score >= 3.75:
                return "BB"
            elif score >= 3.25:
                return "CB"
            elif score >= 2.75:
                return "CC"
            elif score >= 2.25:
                return "DC"
            elif score >= 1.75:
                return "DD"
            else:
                return "FAIL"

        letter_grade = map_grade(prediction)

        col1, col2 = st.columns(2)
        with col1:
            st.metric("Predicted Score", f"{prediction:.2f}")
        with col2:
            st.metric("Predicted Grade", letter_grade)

        if prediction >= 4.0:
            st.success("🎉 Excellent performance predicted!")
        elif prediction >= 3.0:
            st.info("👍 Good performance predicted!")
        elif prediction >= 2.0:
            st.warning("⚠️ Average performance predicted. Consider improvement strategies.")
        else:
            st.error("❌ Poor performance predicted. Immediate intervention recommended.")

else:  # Interactive Dashboard
    st.header("📈 Interactive Dashboard")

    # Correlation heatmap
    st.subheader("🔥 Feature Correlation Matrix")
    df_corr = df.copy()

    categorical_cols = ['Sex', 'High_School_Type', 'Additional_Work', 'Sports_activity',
                       'Transportation', 'Attendance', 'Reading', 'Notes',
                       'Listening_in_Class', 'Project_work']

    for col in categorical_cols:
        if col in df_corr.columns:
            df_corr[col] = pd.Categorical(df_corr[col]).codes

    numeric_cols = ['Student_Age', 'Scholarship', 'Weekly_Study_Hours', 'Grade_num'] + categorical_cols
    corr_matrix = df_corr[numeric_cols].corr()

    fig = px.imshow(corr_matrix, text_auto=True, aspect="auto",
                    title="Feature Correlation Heatmap",
                    color_continuous_scale='RdBu_r')
    st.plotly_chart(fig, use_container_width=True)

    # Interactive filters
    st.subheader("🎛️ Interactive Analysis")

    col1, col2 = st.columns(2)

    with col1:
        selected_feature = st.selectbox("Select feature to analyze:",
                                       ['Sports_activity', 'Additional_Work', 'Transportation',
                                        'Attendance', 'High_School_Type'])

    with col2:
        chart_type = st.selectbox("Chart type:", ['Box Plot', 'Violin Plot', 'Bar Chart'])

    # Generate interactive plot
    if chart_type == 'Box Plot':
        fig = px.box(df, x=selected_feature, y='Grade_num',
                     title=f"Grade Distribution by {selected_feature}")
    elif chart_type == 'Violin Plot':
        fig = px.violin(df, x=selected_feature, y='Grade_num',
                        title=f"Grade Distribution by {selected_feature}")
    else:  # Bar Chart
        avg_grades = df.groupby(selected_feature)['Grade_num'].mean().reset_index()
        fig = px.bar(avg_grades, x=selected_feature, y='Grade_num',
                     title=f"Average Grade by {selected_feature}")

    st.plotly_chart(fig, use_container_width=True)

    # Multi-variate analysis
    st.subheader("🔍 Multi-variate Analysis")

    col1, col2, col3 = st.columns(3)

    with col1:
        x_axis = st.selectbox("X-axis:", ['Weekly_Study_Hours', 'Scholarship', 'Student_Age'])
    with col2:
        color_by = st.selectbox("Color by:", ['Sports_activity', 'Additional_Work', 'Transportation'])
    with col3:
        size_by = st.selectbox("Size by:", ['Weekly_Study_Hours', 'Scholarship', 'None'])

    if size_by == 'None':
        fig = px.scatter(df, x=x_axis, y='Grade_num', color=color_by,
                         title=f"Grade vs {x_axis} (colored by {color_by})")
    else:
        fig = px.scatter(df, x=x_axis, y='Grade_num', color=color_by, size=size_by,
                         title=f"Grade vs {x_axis} (colored by {color_by}, sized by {size_by})")

    st.plotly_chart(fig, use_container_width=True)

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666;'>
    <p>Student Performance Prediction System | Built with Streamlit 🎓</p>
</div>
""", unsafe_allow_html=True)